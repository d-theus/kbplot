!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
AGLWIDGET_H	aglwidget.h	2;"	d
AGLWidget	aglwidget.h	/^class AGLWidget {$/;"	c
AGLWidget::GLinitialize	aglwidget.h	/^	virtual void GLinitialize()=0;$/;"	p	class:AGLWidget	access:public	implementation:pure virtual	signature:()
AGLWidget::GLpaint	aglwidget.h	/^	virtual void GLpaint()=0;$/;"	p	class:AGLWidget	access:public	implementation:pure virtual	signature:()
AGLWidget::GLresize	aglwidget.h	/^	virtual void GLresize(int,int)=0;$/;"	p	class:AGLWidget	access:public	implementation:pure virtual	signature:(int,int)
AGLWidget::addObject	aglwidget.h	/^	virtual void addObject(string, GraphicalObject*)=0;$/;"	p	class:AGLWidget	access:public	implementation:pure virtual	signature:(string, GraphicalObject*)
AGLWidget::clearScene	aglwidget.h	/^	virtual void clearScene()=0;$/;"	p	class:AGLWidget	access:public	implementation:pure virtual	signature:()
AGLWidget::setWorkingArea	aglwidget.h	/^	virtual void setWorkingArea(double, double, double, double)=0;$/;"	p	class:AGLWidget	access:public	implementation:pure virtual	signature:(double, double, double, double)
AGLWidget::subscribeToMouse	aglwidget.h	/^	virtual void subscribeToMouse(IMouseEventListener *subscriber)=0;$/;"	p	class:AGLWidget	access:public	implementation:pure virtual	signature:(IMouseEventListener *subscriber)
AGLWidget::trGLToScreenx	aglwidget.h	/^	virtual int trGLToScreenx(double)=0;$/;"	p	class:AGLWidget	access:public	implementation:pure virtual	signature:(double)
AGLWidget::trGLToScreeny	aglwidget.h	/^	virtual int trGLToScreeny(double)=0;$/;"	p	class:AGLWidget	access:public	implementation:pure virtual	signature:(double)
AGLWidget::trScreenToGLx	aglwidget.h	/^	virtual double trScreenToGLx(int)=0;$/;"	p	class:AGLWidget	access:public	implementation:pure virtual	signature:(int)
AGLWidget::trScreenToGLy	aglwidget.h	/^	virtual double trScreenToGLy(int)=0;$/;"	p	class:AGLWidget	access:public	implementation:pure virtual	signature:(int)
AGLWidget::~AGLWidget	aglwidget.h	/^	virtual ~AGLWidget(){};$/;"	f	class:AGLWidget	access:public	implementation:virtual	signature:()
AR	Makefile	/^AR            = ar cqs$/;"	m
CC	Makefile	/^CC            = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS        = -pipe -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector --param=ssp-buffer-size=4 -Wall -W -D_REENTRANT -fPIE $(DEFINES)$/;"	m
CHK_DIR_EXISTS	Makefile	/^CHK_DIR_EXISTS= test -d$/;"	m
COMPRESS	Makefile	/^COMPRESS      = gzip -9f$/;"	m
COPY	Makefile	/^COPY          = cp -f$/;"	m
COPY_DIR	Makefile	/^COPY_DIR      = cp -f -R$/;"	m
COPY_FILE	Makefile	/^COPY_FILE     = cp -f$/;"	m
CXX	Makefile	/^CXX           = g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS      = -pipe -w -DDEBUG -march=x86-64 -mtune=generic -O2 -pipe -fstack-protector --param=ssp-buffer-size=4 -Wall -W -D_REENTRANT -fPIE $(DEFINES)$/;"	m
DEFINES	Makefile	/^DEFINES       = -DQT_NO_DEBUG -DQT_OPENGL_LIB -DQT_WIDGETS_LIB -DQT_GUI_LIB -DQT_CORE_LIB$/;"	m
DEL_DIR	Makefile	/^DEL_DIR       = rmdir$/;"	m
DEL_FILE	Makefile	/^DEL_FILE      = rm -f$/;"	m
DESTDIR	Makefile	/^DESTDIR       = #avoid trailing-slash linebreak$/;"	m
DIST	Makefile	/^DIST          = \/usr\/lib\/qt\/mkspecs\/features\/spec_pre.prf \\$/;"	m
DataSet	kbplot.cpp	/^DataSet::DataSet(vector<double> *data){$/;"	f	class:DataSet	signature:(vector<double> *data)
DataSet	kbplot.h	/^		DataSet(std::vector<double> *data);$/;"	p	struct:DataSet	access:public	signature:(std::vector<double> *data)
DataSet	kbplot.h	/^struct DataSet {$/;"	s
DataSet::DataSet	kbplot.cpp	/^DataSet::DataSet(vector<double> *data){$/;"	f	class:DataSet	signature:(vector<double> *data)
DataSet::DataSet	kbplot.h	/^		DataSet(std::vector<double> *data);$/;"	p	struct:DataSet	access:public	signature:(std::vector<double> *data)
DataSet::gobj	kbplot.h	/^		GraphicalObject *gobj[2];$/;"	m	struct:DataSet	access:public
DataSet::wlines	kbplot.h	/^		bool wlines = false;$/;"	m	struct:DataSet	access:public
DataSet::wmarks	kbplot.h	/^		bool wmarks = true;$/;"	m	struct:DataSet	access:public
DataSet::~DataSet	kbplot.cpp	/^DataSet::~DataSet(){$/;"	f	class:DataSet	signature:()
DataSet::~DataSet	kbplot.h	/^		virtual ~DataSet();$/;"	p	struct:DataSet	access:public	implementation:virtual	signature:()
EVENT_H	event.h	2;"	d
GLWIDGET_H	glwidget.h	2;"	d
GLWidget	glwidget.cpp	/^GLWidget::GLWidget(): QGLWidget()$/;"	f	class:GLWidget	signature:()
GLWidget	glwidget.h	/^	GLWidget();$/;"	p	class:GLWidget	access:public	signature:()
GLWidget	glwidget.h	/^class GLWidget : public QGLWidget, public AGLWidget$/;"	c	inherits:QGLWidget,AGLWidget
GLWidget::GLWidget	glwidget.cpp	/^GLWidget::GLWidget(): QGLWidget()$/;"	f	class:GLWidget	signature:()
GLWidget::GLWidget	glwidget.h	/^	GLWidget();$/;"	p	class:GLWidget	access:public	signature:()
GLWidget::GLinitialize	glwidget.cpp	/^void GLWidget::GLinitialize(){$/;"	f	class:GLWidget	signature:()
GLWidget::GLinitialize	glwidget.h	/^	virtual void GLinitialize();$/;"	p	class:GLWidget	access:public	implementation:virtual	signature:()
GLWidget::GLpaint	glwidget.cpp	/^void GLWidget::GLpaint(){$/;"	f	class:GLWidget	signature:()
GLWidget::GLpaint	glwidget.h	/^	virtual void GLpaint();$/;"	p	class:GLWidget	access:public	implementation:virtual	signature:()
GLWidget::GLresize	glwidget.cpp	/^void GLWidget::GLresize(int nw, int nh){$/;"	f	class:GLWidget	signature:(int nw, int nh)
GLWidget::GLresize	glwidget.h	/^	virtual void GLresize(int nw, int nh);$/;"	p	class:GLWidget	access:public	implementation:virtual	signature:(int nw, int nh)
GLWidget::GLupdate	glwidget.cpp	/^void GLWidget::GLupdate(){$/;"	f	class:GLWidget	signature:()
GLWidget::GLupdate	glwidget.h	/^	virtual void GLupdate();$/;"	p	class:GLWidget	access:public	implementation:virtual	signature:()
GLWidget::addObject	glwidget.cpp	/^void GLWidget::addObject(string key, GraphicalObject *p){$/;"	f	class:GLWidget	signature:(string key, GraphicalObject *p)
GLWidget::addObject	glwidget.h	/^	virtual void addObject(string, GraphicalObject*);$/;"	p	class:GLWidget	access:public	implementation:virtual	signature:(string, GraphicalObject*)
GLWidget::clearScene	glwidget.h	/^	virtual void clearScene(){};$/;"	f	class:GLWidget	access:public	implementation:virtual	signature:()
GLWidget::gl_to_scr_x	glwidget.cpp	/^int GLWidget::gl_to_scr_x(double x){$/;"	f	class:GLWidget	signature:(double x)
GLWidget::gl_to_scr_x	glwidget.h	/^	virtual int gl_to_scr_x(double);$/;"	p	class:GLWidget	access:public	implementation:virtual	signature:(double)
GLWidget::gl_to_scr_y	glwidget.cpp	/^int GLWidget::gl_to_scr_y(double y){$/;"	f	class:GLWidget	signature:(double y)
GLWidget::gl_to_scr_y	glwidget.h	/^	virtual int gl_to_scr_y(double);$/;"	p	class:GLWidget	access:public	implementation:virtual	signature:(double)
GLWidget::initializeGL	glwidget.cpp	/^void GLWidget::initializeGL() {$/;"	f	class:GLWidget	signature:()
GLWidget::initializeGL	glwidget.h	/^	void initializeGL();$/;"	p	class:GLWidget	access:public	signature:()
GLWidget::metaObject	moc_glwidget.cpp	/^const QMetaObject *GLWidget::metaObject() const$/;"	f	class:GLWidget	signature:() const
GLWidget::mouseListeners	glwidget.h	/^	vector<IMouseEventListener*> mouseListeners;$/;"	m	class:GLWidget	access:private
GLWidget::mouseMoveEvent	glwidget.cpp	/^void GLWidget::mouseMoveEvent(QMouseEvent *e){$/;"	f	class:GLWidget	signature:(QMouseEvent *e)
GLWidget::mouseMoveEvent	glwidget.h	/^	void mouseMoveEvent(QMouseEvent *e);$/;"	p	class:GLWidget	access:public	signature:(QMouseEvent *e)
GLWidget::mouseReleaseEvent	glwidget.cpp	/^void GLWidget::mouseReleaseEvent(QMouseEvent *e){$/;"	f	class:GLWidget	signature:(QMouseEvent *e)
GLWidget::mouseReleaseEvent	glwidget.h	/^	void mouseReleaseEvent(QMouseEvent *e);$/;"	p	class:GLWidget	access:public	signature:(QMouseEvent *e)
GLWidget::mouseX	glwidget.h	/^	int mouseX, mouseY;$/;"	m	class:GLWidget	access:private
GLWidget::mouseY	glwidget.h	/^	int mouseX, mouseY;$/;"	m	class:GLWidget	access:private
GLWidget::objects	glwidget.h	/^	map<string, GraphicalObject*> objects;$/;"	m	class:GLWidget	access:private
GLWidget::paintGL	glwidget.cpp	/^void GLWidget::paintGL(){$/;"	f	class:GLWidget	signature:()
GLWidget::paintGL	glwidget.h	/^	void paintGL();$/;"	p	class:GLWidget	access:public	signature:()
GLWidget::qt_metacall	moc_glwidget.cpp	/^int GLWidget::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:GLWidget	signature:(QMetaObject::Call _c, int _id, void **_a)
GLWidget::qt_metacast	moc_glwidget.cpp	/^void *GLWidget::qt_metacast(const char *_clname)$/;"	f	class:GLWidget	signature:(const char *_clname)
GLWidget::qt_static_metacall	moc_glwidget.cpp	/^void GLWidget::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:GLWidget	signature:(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
GLWidget::resizeGL	glwidget.cpp	/^void GLWidget::resizeGL(int nw, int nh){$/;"	f	class:GLWidget	signature:(int nw, int nh)
GLWidget::resizeGL	glwidget.h	/^	void resizeGL(int nw, int nh);$/;"	p	class:GLWidget	access:public	signature:(int nw, int nh)
GLWidget::scr_to_gl_x	glwidget.cpp	/^double GLWidget::scr_to_gl_x(int x){$/;"	f	class:GLWidget	signature:(int x)
GLWidget::scr_to_gl_x	glwidget.h	/^	virtual double scr_to_gl_x(int);$/;"	p	class:GLWidget	access:public	implementation:virtual	signature:(int)
GLWidget::scr_to_gl_y	glwidget.cpp	/^double GLWidget::scr_to_gl_y(int y){$/;"	f	class:GLWidget	signature:(int y)
GLWidget::scr_to_gl_y	glwidget.h	/^	virtual double scr_to_gl_y(int);$/;"	p	class:GLWidget	access:public	implementation:virtual	signature:(int)
GLWidget::setWorkingArea	glwidget.cpp	/^void GLWidget::setWorkingArea(double xmin, double xmax, double ymin, double ymax){$/;"	f	class:GLWidget	signature:(double xmin, double xmax, double ymin, double ymax)
GLWidget::setWorkingArea	glwidget.h	/^	virtual void setWorkingArea(double xmin, double xmax, double ymin, double ymax);$/;"	p	class:GLWidget	access:public	implementation:virtual	signature:(double xmin, double xmax, double ymin, double ymax)
GLWidget::staticMetaObject	moc_glwidget.cpp	/^const QMetaObject GLWidget::staticMetaObject = {$/;"	m	class:GLWidget	file:
GLWidget::subscribeToMouse	glwidget.cpp	/^void GLWidget::subscribeToMouse(IMouseEventListener*l){$/;"	f	class:GLWidget	signature:(IMouseEventListener*l)
GLWidget::subscribeToMouse	glwidget.h	/^	virtual void subscribeToMouse(IMouseEventListener*);$/;"	p	class:GLWidget	access:public	implementation:virtual	signature:(IMouseEventListener*)
GLWidget::~GLWidget	glwidget.h	/^	virtual ~GLWidget(){};$/;"	f	class:GLWidget	access:public	implementation:virtual	signature:()
GLinitialize	aglwidget.h	/^	virtual void GLinitialize()=0;$/;"	p	class:AGLWidget	access:public	implementation:pure virtual	signature:()
GLinitialize	glwidget.cpp	/^void GLWidget::GLinitialize(){$/;"	f	class:GLWidget	signature:()
GLinitialize	glwidget.h	/^	virtual void GLinitialize();$/;"	p	class:GLWidget	access:public	implementation:virtual	signature:()
GLpaint	aglwidget.h	/^	virtual void GLpaint()=0;$/;"	p	class:AGLWidget	access:public	implementation:pure virtual	signature:()
GLpaint	glwidget.cpp	/^void GLWidget::GLpaint(){$/;"	f	class:GLWidget	signature:()
GLpaint	glwidget.h	/^	virtual void GLpaint();$/;"	p	class:GLWidget	access:public	implementation:virtual	signature:()
GLresize	aglwidget.h	/^	virtual void GLresize(int,int)=0;$/;"	p	class:AGLWidget	access:public	implementation:pure virtual	signature:(int,int)
GLresize	glwidget.cpp	/^void GLWidget::GLresize(int nw, int nh){$/;"	f	class:GLWidget	signature:(int nw, int nh)
GLresize	glwidget.h	/^	virtual void GLresize(int nw, int nh);$/;"	p	class:GLWidget	access:public	implementation:virtual	signature:(int nw, int nh)
GLupdate	glwidget.cpp	/^void GLWidget::GLupdate(){$/;"	f	class:GLWidget	signature:()
GLupdate	glwidget.h	/^	virtual void GLupdate();$/;"	p	class:GLWidget	access:public	implementation:virtual	signature:()
GRAPHICAL_OBJECT	graphical_object.h	2;"	d
GraphicalObject	graphical_object.h	/^class GraphicalObject {$/;"	c
GraphicalObject::after_draw	graphical_object.cpp	/^void GraphicalObject::after_draw()const{$/;"	f	class:GraphicalObject	signature:() const
GraphicalObject::after_draw	graphical_object.h	/^		void after_draw()const;$/;"	p	class:GraphicalObject	access:protected	signature:() const
GraphicalObject::before_draw	graphical_object.cpp	/^void GraphicalObject::before_draw()const{$/;"	f	class:GraphicalObject	signature:() const
GraphicalObject::before_draw	graphical_object.h	/^		void before_draw()const;$/;"	p	class:GraphicalObject	access:protected	signature:() const
GraphicalObject::draw	graphical_object.h	/^		virtual void draw() const = 0;$/;"	p	class:GraphicalObject	access:public	implementation:pure virtual	signature:() const
GraphicalObject::isFixed	graphical_object.h	/^		bool isFixed= false;$/;"	m	class:GraphicalObject	access:protected
GraphicalObject::isScaled	graphical_object.h	/^		bool isScaled = false;$/;"	m	class:GraphicalObject	access:protected
GraphicalObject::scX	graphical_object.h	/^		double scX, scY;$/;"	m	class:GraphicalObject	access:protected
GraphicalObject::scY	graphical_object.h	/^		double scX, scY;$/;"	m	class:GraphicalObject	access:protected
GraphicalObject::setFixed	graphical_object.cpp	/^void GraphicalObject::setFixed(bool b){$/;"	f	class:GraphicalObject	signature:(bool b)
GraphicalObject::setFixed	graphical_object.h	/^		void setFixed(bool b = true);$/;"	p	class:GraphicalObject	access:public	signature:(bool b = true)
GraphicalObject::setScale	graphical_object.cpp	/^void GraphicalObject::setScale(bool b){$/;"	f	class:GraphicalObject	signature:(bool b)
GraphicalObject::setScale	graphical_object.cpp	/^void GraphicalObject::setScale(double x, double y){$/;"	f	class:GraphicalObject	signature:(double x, double y)
GraphicalObject::setScale	graphical_object.h	/^		void setScale(bool);$/;"	p	class:GraphicalObject	access:public	signature:(bool)
GraphicalObject::setScale	graphical_object.h	/^		void setScale(double,double);$/;"	p	class:GraphicalObject	access:public	signature:(double,double)
GraphicalObject::style	graphical_object.h	/^		Style style;$/;"	m	class:GraphicalObject	access:public
GraphicalObject::trX	graphical_object.h	/^		double trX, trY;$/;"	m	class:GraphicalObject	access:protected
GraphicalObject::trY	graphical_object.h	/^		double trX, trY;$/;"	m	class:GraphicalObject	access:protected
GraphicalObject::~GraphicalObject	graphical_object.h	/^		virtual ~GraphicalObject(){};$/;"	f	class:GraphicalObject	access:public	implementation:virtual	signature:()
IMouseEventListener	event.h	/^class IMouseEventListener {$/;"	c
IMouseEventListener::mouseMoveEvent	event.h	/^	virtual void mouseMoveEvent(int,int)=0;$/;"	p	class:IMouseEventListener	access:public	implementation:pure virtual	signature:(int,int)
IMouseEventListener::mousePressEvent	event.h	/^	virtual void mousePressEvent(int,int)=0;$/;"	p	class:IMouseEventListener	access:public	implementation:pure virtual	signature:(int,int)
IMouseEventListener::mouseReleaseEvent	event.h	/^	virtual void mouseReleaseEvent(int,int)=0;$/;"	p	class:IMouseEventListener	access:public	implementation:pure virtual	signature:(int,int)
IMouseEventListener::mouseScrollEvent	event.h	/^	virtual void mouseScrollEvent(int)=0;$/;"	p	class:IMouseEventListener	access:public	implementation:pure virtual	signature:(int)
IMouseEventListener::~IMouseEventListener	event.h	/^	virtual ~IMouseEventListener() {};$/;"	f	class:IMouseEventListener	access:public	implementation:virtual	signature:()
INCPATH	Makefile	/^INCPATH       = -I\/usr\/lib\/qt\/mkspecs\/linux-g++ -I. -I. -I\/usr\/include\/qt -I\/usr\/include\/qt\/QtOpenGL -I\/usr\/include\/qt\/QtWidgets -I\/usr\/include\/qt\/QtGui -I\/usr\/include\/qt\/QtCore -I.$/;"	m
INSTALL_DIR	Makefile	/^INSTALL_DIR   = $(COPY_DIR)$/;"	m
INSTALL_FILE	Makefile	/^INSTALL_FILE  = install -m 644 -p$/;"	m
INSTALL_PROGRAM	Makefile	/^INSTALL_PROGRAM = install -m 755 -p$/;"	m
KbPlot	kbplot.cpp	/^KbPlot::KbPlot(GLWidget *_container, double _xmin, double _xmax, double _ymin, double _ymax){$/;"	f	class:KbPlot	signature:(GLWidget *_container, double _xmin, double _xmax, double _ymin, double _ymax)
KbPlot	kbplot.h	/^		KbPlot(GLWidget*, double, double, double, double);$/;"	p	class:KbPlot	access:public	signature:(GLWidget*, double, double, double, double)
KbPlot	kbplot.h	/^class KbPlot : IMouseEventListener {$/;"	c	inherits:IMouseEventListener
KbPlot::KbPlot	kbplot.cpp	/^KbPlot::KbPlot(GLWidget *_container, double _xmin, double _xmax, double _ymin, double _ymax){$/;"	f	class:KbPlot	signature:(GLWidget *_container, double _xmin, double _xmax, double _ymin, double _ymax)
KbPlot::KbPlot	kbplot.h	/^		KbPlot(GLWidget*, double, double, double, double);$/;"	p	class:KbPlot	access:public	signature:(GLWidget*, double, double, double, double)
KbPlot::addData	kbplot.cpp	/^void KbPlot::addData(DataSet &ds){$/;"	f	class:KbPlot	signature:(DataSet &ds)
KbPlot::addData	kbplot.h	/^		void addData(DataSet &ds);$/;"	p	class:KbPlot	access:public	signature:(DataSet &ds)
KbPlot::axis_xb	kbplot.h	/^		Line *axis_xt, *axis_xb, *axis_yl, *axis_yr;$/;"	m	class:KbPlot	access:private
KbPlot::axis_xt	kbplot.h	/^		Line *axis_xt, *axis_xb, *axis_yl, *axis_yr;$/;"	m	class:KbPlot	access:private
KbPlot::axis_yl	kbplot.h	/^		Line *axis_xt, *axis_xb, *axis_yl, *axis_yr;$/;"	m	class:KbPlot	access:private
KbPlot::axis_yr	kbplot.h	/^		Line *axis_xt, *axis_xb, *axis_yl, *axis_yr;$/;"	m	class:KbPlot	access:private
KbPlot::c_frameThickness	kbplot.h	/^		static const double c_frameThickness = 0.02;$/;"	m	class:KbPlot	access:public
KbPlot::c_tickLength	kbplot.h	/^		static const double c_tickLength = 0.02;$/;"	m	class:KbPlot	access:public
KbPlot::container	kbplot.h	/^		GLWidget *container;$/;"	m	class:KbPlot	access:private
KbPlot::datasets	kbplot.h	/^		vector<DataSet> datasets;$/;"	m	class:KbPlot	access:private
KbPlot::draw	kbplot.cpp	/^void KbPlot::draw(){$/;"	f	class:KbPlot	signature:()
KbPlot::draw	kbplot.h	/^		void draw();$/;"	p	class:KbPlot	access:public	signature:()
KbPlot::drawAxis	kbplot.cpp	/^void KbPlot::drawAxis(){$/;"	f	class:KbPlot	signature:()
KbPlot::drawAxis	kbplot.h	/^		void drawAxis();$/;"	p	class:KbPlot	access:private	signature:()
KbPlot::drawBg	kbplot.h	/^		void drawBg();$/;"	p	class:KbPlot	access:private	signature:()
KbPlot::drawNumbers	kbplot.h	/^		void drawNumbers();$/;"	p	class:KbPlot	access:private	signature:()
KbPlot::mouseMoveEvent	kbplot.cpp	/^void KbPlot::mouseMoveEvent(int x, int y){$/;"	f	class:KbPlot	signature:(int x, int y)
KbPlot::mouseMoveEvent	kbplot.h	/^		virtual void mouseMoveEvent(int,int);$/;"	p	class:KbPlot	access:public	implementation:virtual	signature:(int,int)
KbPlot::mousePressEvent	kbplot.cpp	/^void KbPlot::mousePressEvent(int,int){$/;"	f	class:KbPlot	signature:(int,int)
KbPlot::mousePressEvent	kbplot.h	/^		virtual void mousePressEvent(int,int);$/;"	p	class:KbPlot	access:public	implementation:virtual	signature:(int,int)
KbPlot::mouseReleaseEvent	kbplot.cpp	/^void KbPlot::mouseReleaseEvent(int,int){$/;"	f	class:KbPlot	signature:(int,int)
KbPlot::mouseReleaseEvent	kbplot.h	/^		virtual void mouseReleaseEvent(int,int);$/;"	p	class:KbPlot	access:public	implementation:virtual	signature:(int,int)
KbPlot::mouseScrollEvent	kbplot.cpp	/^void KbPlot::mouseScrollEvent(int a){$/;"	f	class:KbPlot	signature:(int a)
KbPlot::mouseScrollEvent	kbplot.h	/^		virtual void mouseScrollEvent(int);$/;"	p	class:KbPlot	access:public	implementation:virtual	signature:(int)
KbPlot::setRanges	kbplot.cpp	/^void KbPlot::setRanges(double _xmin, double _xmax, double _ymin, double _ymax){$/;"	f	class:KbPlot	signature:(double _xmin, double _xmax, double _ymin, double _ymax)
KbPlot::setRanges	kbplot.h	/^		void setRanges(double,double,double,double);$/;"	p	class:KbPlot	access:public	signature:(double,double,double,double)
KbPlot::xmax	kbplot.h	/^		double xmax, ymax, xmin, ymin;$/;"	m	class:KbPlot	access:private
KbPlot::xmin	kbplot.h	/^		double xmax, ymax, xmin, ymin;$/;"	m	class:KbPlot	access:private
KbPlot::xticks_b	kbplot.h	/^		std::vector<Line*> xticks_b;$/;"	m	class:KbPlot	access:private
KbPlot::xticks_t	kbplot.h	/^		std::vector<Line*> xticks_t;$/;"	m	class:KbPlot	access:private
KbPlot::ymax	kbplot.h	/^		double xmax, ymax, xmin, ymin;$/;"	m	class:KbPlot	access:private
KbPlot::ymin	kbplot.h	/^		double xmax, ymax, xmin, ymin;$/;"	m	class:KbPlot	access:private
KbPlot::yticks_b	kbplot.h	/^		std::vector<Line*> yticks_b;$/;"	m	class:KbPlot	access:private
KbPlot::yticks_t	kbplot.h	/^		std::vector<Line*> yticks_t;$/;"	m	class:KbPlot	access:private
KbPlot::~KbPlot	kbplot.cpp	/^KbPlot::~KbPlot(){$/;"	f	class:KbPlot	signature:()
KbPlot::~KbPlot	kbplot.h	/^		~KbPlot();$/;"	p	class:KbPlot	access:public	signature:()
LFLAGS	Makefile	/^LFLAGS        = -Wl,-O1,--sort-common,--as-needed,-z,relro -Wl,-O1$/;"	m
LIBS	Makefile	/^LIBS          = $(SUBLIBS) -lQt5OpenGL -lQt5Widgets -lQt5Gui -lQt5Core -lGL -lpthread $/;"	m
LINE_DASHED	graphical_object.h	/^		LINE_DASHED,$/;"	e	enum:Style::__anon1
LINE_DASH_DOTTED	graphical_object.h	/^		LINE_DASH_DOTTED$/;"	e	enum:Style::__anon1
LINE_DOTTED	graphical_object.h	/^		LINE_DOTTED,$/;"	e	enum:Style::__anon1
LINE_STD	graphical_object.h	/^		LINE_STD,$/;"	e	enum:Style::__anon1
LINK	Makefile	/^LINK          = g++$/;"	m
Line	graphical_object.cpp	/^Line::Line(double _x1, double _y1, double _x2, double _y2): x1(_x1), x2(_x2), y1(_y1), y2(_y2) { } $/;"	f	class:Line	signature:(double _x1, double _y1, double _x2, double _y2)
Line	graphical_object.h	/^		Line(double,double,double,double);$/;"	p	class:Line	access:public	signature:(double,double,double,double)
Line	graphical_object.h	/^class Line : public GraphicalObject {$/;"	c	inherits:GraphicalObject
Line::Line	graphical_object.cpp	/^Line::Line(double _x1, double _y1, double _x2, double _y2): x1(_x1), x2(_x2), y1(_y1), y2(_y2) { } $/;"	f	class:Line	signature:(double _x1, double _y1, double _x2, double _y2)
Line::Line	graphical_object.h	/^		Line(double,double,double,double);$/;"	p	class:Line	access:public	signature:(double,double,double,double)
Line::draw	graphical_object.cpp	/^void Line::draw() const {$/;"	f	class:Line	signature:() const
Line::draw	graphical_object.h	/^		virtual void draw() const;$/;"	p	class:Line	access:public	implementation:virtual	signature:() const
Line::get_x1	graphical_object.cpp	/^double Line::get_x1(){$/;"	f	class:Line	signature:()
Line::get_x1	graphical_object.h	/^		double get_x1();$/;"	p	class:Line	access:public	signature:()
Line::get_x2	graphical_object.cpp	/^double Line::get_x2(){$/;"	f	class:Line	signature:()
Line::get_x2	graphical_object.h	/^		double get_x2();$/;"	p	class:Line	access:public	signature:()
Line::get_y1	graphical_object.cpp	/^double Line::get_y1(){$/;"	f	class:Line	signature:()
Line::get_y1	graphical_object.h	/^		double get_y1();$/;"	p	class:Line	access:public	signature:()
Line::get_y2	graphical_object.cpp	/^double Line::get_y2(){$/;"	f	class:Line	signature:()
Line::get_y2	graphical_object.h	/^		double get_y2();$/;"	p	class:Line	access:public	signature:()
Line::setCoordinates	graphical_object.cpp	/^void Line::setCoordinates(double _x1, double _y1, double _x2, double _y2){$/;"	f	class:Line	signature:(double _x1, double _y1, double _x2, double _y2)
Line::setCoordinates	graphical_object.h	/^		void setCoordinates(double,double,double,double);$/;"	p	class:Line	access:public	signature:(double,double,double,double)
Line::x1	graphical_object.h	/^		double x1,x2,y1,y2;$/;"	m	class:Line	access:private
Line::x2	graphical_object.h	/^		double x1,x2,y1,y2;$/;"	m	class:Line	access:private
Line::y1	graphical_object.h	/^		double x1,x2,y1,y2;$/;"	m	class:Line	access:private
Line::y2	graphical_object.h	/^		double x1,x2,y1,y2;$/;"	m	class:Line	access:private
Line::~Line	graphical_object.h	/^		virtual ~Line(){};$/;"	f	class:Line	access:public	implementation:virtual	signature:()
LineStroke	graphical_object.h	/^	} LineStroke;$/;"	t	struct:Style	typeref:enum:Style::__anon1	access:public
MAKEFILE	Makefile	/^MAKEFILE      = Makefile$/;"	m
MARK_CROSS	graphical_object.h	/^		MARK_CROSS$/;"	e	enum:Style::__anon2
MARK_DOT	graphical_object.h	/^		MARK_DOT,$/;"	e	enum:Style::__anon2
MARK_SQUARE	graphical_object.h	/^		MARK_SQUARE,$/;"	e	enum:Style::__anon2
MARK_TRIANGLE	graphical_object.h	/^		MARK_TRIANGLE,$/;"	e	enum:Style::__anon2
MKDIR	Makefile	/^MKDIR         = mkdir -p$/;"	m
MOVE	Makefile	/^MOVE          = mv -f$/;"	m
MRK_TYPE_CROSS	graphical_object.h	/^	MRK_TYPE_CROSS$/;"	e	enum:__anon3
MRK_TYPE_DOT	graphical_object.h	/^	MRK_TYPE_DOT,$/;"	e	enum:__anon3
MarkerSet	graphical_object.cpp	/^MarkerSet::MarkerSet(vector<double> *data){$/;"	f	class:MarkerSet	signature:(vector<double> *data)
MarkerSet	graphical_object.h	/^		MarkerSet (vector<double> *data);$/;"	p	class:MarkerSet	access:public	signature:(vector<double> *data)
MarkerSet	graphical_object.h	/^class MarkerSet : public GraphicalObject {$/;"	c	inherits:GraphicalObject
MarkerSet::MarkerSet	graphical_object.cpp	/^MarkerSet::MarkerSet(vector<double> *data){$/;"	f	class:MarkerSet	signature:(vector<double> *data)
MarkerSet::MarkerSet	graphical_object.h	/^		MarkerSet (vector<double> *data);$/;"	p	class:MarkerSet	access:public	signature:(vector<double> *data)
MarkerSet::data	graphical_object.h	/^		vector<double> *data;$/;"	m	class:MarkerSet	access:private
MarkerSet::draw	graphical_object.cpp	/^void MarkerSet::draw() const{$/;"	f	class:MarkerSet	signature:() const
MarkerSet::draw	graphical_object.h	/^		virtual void draw() const;$/;"	p	class:MarkerSet	access:public	implementation:virtual	signature:() const
MarkerSet::~MarkerSet	graphical_object.h	/^		virtual ~MarkerSet (){};$/;"	f	class:MarkerSet	access:public	implementation:virtual	signature:()
MarkerType	graphical_object.h	/^	} MarkerType;$/;"	t	struct:Style	typeref:enum:Style::__anon2	access:public
MarkerType	graphical_object.h	/^} MarkerType;$/;"	t	typeref:enum:__anon3
OBJECTS	Makefile	/^OBJECTS       = glwidget.o \\$/;"	m
OBJECTS_DIR	Makefile	/^OBJECTS_DIR   = .\/$/;"	m
Polyline	graphical_object.cpp	/^Polyline::Polyline(std::vector<double> *vs){$/;"	f	class:Polyline	signature:(std::vector<double> *vs)
Polyline	graphical_object.h	/^		Polyline(vector<double> *);$/;"	p	class:Polyline	access:public	signature:(vector<double> *)
Polyline	graphical_object.h	/^class Polyline : public GraphicalObject {$/;"	c	inherits:GraphicalObject
Polyline::Polyline	graphical_object.cpp	/^Polyline::Polyline(std::vector<double> *vs){$/;"	f	class:Polyline	signature:(std::vector<double> *vs)
Polyline::Polyline	graphical_object.h	/^		Polyline(vector<double> *);$/;"	p	class:Polyline	access:public	signature:(vector<double> *)
Polyline::draw	graphical_object.cpp	/^void Polyline::draw() const{$/;"	f	class:Polyline	signature:() const
Polyline::draw	graphical_object.h	/^		virtual void draw() const;$/;"	p	class:Polyline	access:public	implementation:virtual	signature:() const
Polyline::values	graphical_object.h	/^		vector<double> *values;$/;"	m	class:Polyline	access:private
Polyline::~Polyline	graphical_object.h	/^		virtual ~Polyline(){};$/;"	f	class:Polyline	access:public	implementation:virtual	signature:()
QMAKE	Makefile	/^QMAKE         = \/usr\/lib\/qt\/bin\/qmake$/;"	m
QMAKE_TARGET	Makefile	/^QMAKE_TARGET  = kbplot$/;"	m
QT_MOC_LITERAL	moc_glwidget.cpp	25;"	d	file:
QT_MOC_LITERAL	moc_glwidget.cpp	36;"	d	file:
RANLIB	Makefile	/^RANLIB        = $/;"	m
SED	Makefile	/^SED           = sed$/;"	m
SOURCES	Makefile	/^SOURCES       = glwidget.cpp \\$/;"	m
STRIP	Makefile	/^STRIP         = strip$/;"	m
SYMLINK	Makefile	/^SYMLINK       = ln -f -s$/;"	m
Style	graphical_object.h	/^struct Style {$/;"	s
Style::LINE_DASHED	graphical_object.h	/^		LINE_DASHED,$/;"	e	enum:Style::__anon1
Style::LINE_DASH_DOTTED	graphical_object.h	/^		LINE_DASH_DOTTED$/;"	e	enum:Style::__anon1
Style::LINE_DOTTED	graphical_object.h	/^		LINE_DOTTED,$/;"	e	enum:Style::__anon1
Style::LINE_STD	graphical_object.h	/^		LINE_STD,$/;"	e	enum:Style::__anon1
Style::LineStroke	graphical_object.h	/^	} LineStroke;$/;"	t	struct:Style	typeref:enum:Style::__anon1	access:public
Style::MARK_CROSS	graphical_object.h	/^		MARK_CROSS$/;"	e	enum:Style::__anon2
Style::MARK_DOT	graphical_object.h	/^		MARK_DOT,$/;"	e	enum:Style::__anon2
Style::MARK_SQUARE	graphical_object.h	/^		MARK_SQUARE,$/;"	e	enum:Style::__anon2
Style::MARK_TRIANGLE	graphical_object.h	/^		MARK_TRIANGLE,$/;"	e	enum:Style::__anon2
Style::MarkerType	graphical_object.h	/^	} MarkerType;$/;"	t	struct:Style	typeref:enum:Style::__anon2	access:public
Style::lineColor	graphical_object.h	/^	unsigned int lineColor;$/;"	m	struct:Style	access:public
Style::lineStroke	graphical_object.h	/^	LineStroke lineStroke;$/;"	m	struct:Style	access:public
Style::lineThickness	graphical_object.h	/^	unsigned int lineThickness;$/;"	m	struct:Style	access:public
Style::markerSize	graphical_object.h	/^	unsigned int markerSize = 5;$/;"	m	struct:Style	access:public
Style::markerType	graphical_object.h	/^	MarkerType markerType = MARK_SQUARE;$/;"	m	struct:Style	access:public
TAR	Makefile	/^TAR           = tar -cf$/;"	m
TARGET	Makefile	/^TARGET        = kbplot$/;"	m
addData	kbplot.cpp	/^void KbPlot::addData(DataSet &ds){$/;"	f	class:KbPlot	signature:(DataSet &ds)
addData	kbplot.h	/^		void addData(DataSet &ds);$/;"	p	class:KbPlot	access:public	signature:(DataSet &ds)
addObject	aglwidget.h	/^	virtual void addObject(string, GraphicalObject*)=0;$/;"	p	class:AGLWidget	access:public	implementation:pure virtual	signature:(string, GraphicalObject*)
addObject	glwidget.cpp	/^void GLWidget::addObject(string key, GraphicalObject *p){$/;"	f	class:GLWidget	signature:(string key, GraphicalObject *p)
addObject	glwidget.h	/^	virtual void addObject(string, GraphicalObject*);$/;"	p	class:GLWidget	access:public	implementation:virtual	signature:(string, GraphicalObject*)
after_draw	graphical_object.cpp	/^void GraphicalObject::after_draw()const{$/;"	f	class:GraphicalObject	signature:() const
after_draw	graphical_object.h	/^		void after_draw()const;$/;"	p	class:GraphicalObject	access:protected	signature:() const
axis_xb	kbplot.h	/^		Line *axis_xt, *axis_xb, *axis_yl, *axis_yr;$/;"	m	class:KbPlot	access:private
axis_xt	kbplot.h	/^		Line *axis_xt, *axis_xb, *axis_yl, *axis_yr;$/;"	m	class:KbPlot	access:private
axis_yl	kbplot.h	/^		Line *axis_xt, *axis_xb, *axis_yl, *axis_yr;$/;"	m	class:KbPlot	access:private
axis_yr	kbplot.h	/^		Line *axis_xt, *axis_xb, *axis_yl, *axis_yr;$/;"	m	class:KbPlot	access:private
before_draw	graphical_object.cpp	/^void GraphicalObject::before_draw()const{$/;"	f	class:GraphicalObject	signature:() const
before_draw	graphical_object.h	/^		void before_draw()const;$/;"	p	class:GraphicalObject	access:protected	signature:() const
c_frameThickness	kbplot.h	/^		static const double c_frameThickness = 0.02;$/;"	m	class:KbPlot	access:public
c_tickLength	kbplot.h	/^		static const double c_tickLength = 0.02;$/;"	m	class:KbPlot	access:public
clearScene	aglwidget.h	/^	virtual void clearScene()=0;$/;"	p	class:AGLWidget	access:public	implementation:pure virtual	signature:()
clearScene	glwidget.h	/^	virtual void clearScene(){};$/;"	f	class:GLWidget	access:public	implementation:virtual	signature:()
container	kbplot.h	/^		GLWidget *container;$/;"	m	class:KbPlot	access:private
data	graphical_object.h	/^		vector<double> *data;$/;"	m	class:MarkerSet	access:private
data	moc_glwidget.cpp	/^    QByteArrayData data[1];$/;"	m	struct:qt_meta_stringdata_GLWidget_t	file:	access:public
datasets	kbplot.h	/^		vector<DataSet> datasets;$/;"	m	class:KbPlot	access:private
draw	graphical_object.cpp	/^void Line::draw() const {$/;"	f	class:Line	signature:() const
draw	graphical_object.cpp	/^void MarkerSet::draw() const{$/;"	f	class:MarkerSet	signature:() const
draw	graphical_object.cpp	/^void Polyline::draw() const{$/;"	f	class:Polyline	signature:() const
draw	graphical_object.h	/^		virtual void draw() const = 0;$/;"	p	class:GraphicalObject	access:public	implementation:pure virtual	signature:() const
draw	graphical_object.h	/^		virtual void draw() const;$/;"	p	class:Line	access:public	implementation:virtual	signature:() const
draw	graphical_object.h	/^		virtual void draw() const;$/;"	p	class:MarkerSet	access:public	implementation:virtual	signature:() const
draw	graphical_object.h	/^		virtual void draw() const;$/;"	p	class:Polyline	access:public	implementation:virtual	signature:() const
draw	kbplot.cpp	/^void KbPlot::draw(){$/;"	f	class:KbPlot	signature:()
draw	kbplot.h	/^		void draw();$/;"	p	class:KbPlot	access:public	signature:()
drawAxis	kbplot.cpp	/^void KbPlot::drawAxis(){$/;"	f	class:KbPlot	signature:()
drawAxis	kbplot.h	/^		void drawAxis();$/;"	p	class:KbPlot	access:private	signature:()
drawBg	kbplot.h	/^		void drawBg();$/;"	p	class:KbPlot	access:private	signature:()
drawNumbers	kbplot.h	/^		void drawNumbers();$/;"	p	class:KbPlot	access:private	signature:()
get_x1	graphical_object.cpp	/^double Line::get_x1(){$/;"	f	class:Line	signature:()
get_x1	graphical_object.h	/^		double get_x1();$/;"	p	class:Line	access:public	signature:()
get_x2	graphical_object.cpp	/^double Line::get_x2(){$/;"	f	class:Line	signature:()
get_x2	graphical_object.h	/^		double get_x2();$/;"	p	class:Line	access:public	signature:()
get_y1	graphical_object.cpp	/^double Line::get_y1(){$/;"	f	class:Line	signature:()
get_y1	graphical_object.h	/^		double get_y1();$/;"	p	class:Line	access:public	signature:()
get_y2	graphical_object.cpp	/^double Line::get_y2(){$/;"	f	class:Line	signature:()
get_y2	graphical_object.h	/^		double get_y2();$/;"	p	class:Line	access:public	signature:()
gl_to_scr_x	glwidget.cpp	/^int GLWidget::gl_to_scr_x(double x){$/;"	f	class:GLWidget	signature:(double x)
gl_to_scr_x	glwidget.h	/^	virtual int gl_to_scr_x(double);$/;"	p	class:GLWidget	access:public	implementation:virtual	signature:(double)
gl_to_scr_y	glwidget.cpp	/^int GLWidget::gl_to_scr_y(double y){$/;"	f	class:GLWidget	signature:(double y)
gl_to_scr_y	glwidget.h	/^	virtual int gl_to_scr_y(double);$/;"	p	class:GLWidget	access:public	implementation:virtual	signature:(double)
gobj	kbplot.h	/^		GraphicalObject *gobj[2];$/;"	m	struct:DataSet	access:public
initializeGL	glwidget.cpp	/^void GLWidget::initializeGL() {$/;"	f	class:GLWidget	signature:()
initializeGL	glwidget.h	/^	void initializeGL();$/;"	p	class:GLWidget	access:public	signature:()
isFixed	graphical_object.h	/^		bool isFixed= false;$/;"	m	class:GraphicalObject	access:protected
isScaled	graphical_object.h	/^		bool isScaled = false;$/;"	m	class:GraphicalObject	access:protected
lineColor	graphical_object.h	/^	unsigned int lineColor;$/;"	m	struct:Style	access:public
lineStroke	graphical_object.h	/^	LineStroke lineStroke;$/;"	m	struct:Style	access:public
lineThickness	graphical_object.h	/^	unsigned int lineThickness;$/;"	m	struct:Style	access:public
main	main.cpp	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
markerSize	graphical_object.h	/^	unsigned int markerSize = 5;$/;"	m	struct:Style	access:public
markerType	graphical_object.h	/^	MarkerType markerType = MARK_SQUARE;$/;"	m	struct:Style	access:public
metaObject	moc_glwidget.cpp	/^const QMetaObject *GLWidget::metaObject() const$/;"	f	class:GLWidget	signature:() const
mouseListeners	glwidget.h	/^	vector<IMouseEventListener*> mouseListeners;$/;"	m	class:GLWidget	access:private
mouseMoveEvent	event.h	/^	virtual void mouseMoveEvent(int,int)=0;$/;"	p	class:IMouseEventListener	access:public	implementation:pure virtual	signature:(int,int)
mouseMoveEvent	glwidget.cpp	/^void GLWidget::mouseMoveEvent(QMouseEvent *e){$/;"	f	class:GLWidget	signature:(QMouseEvent *e)
mouseMoveEvent	glwidget.h	/^	void mouseMoveEvent(QMouseEvent *e);$/;"	p	class:GLWidget	access:public	signature:(QMouseEvent *e)
mouseMoveEvent	kbplot.cpp	/^void KbPlot::mouseMoveEvent(int x, int y){$/;"	f	class:KbPlot	signature:(int x, int y)
mouseMoveEvent	kbplot.h	/^		virtual void mouseMoveEvent(int,int);$/;"	p	class:KbPlot	access:public	implementation:virtual	signature:(int,int)
mousePressEvent	event.h	/^	virtual void mousePressEvent(int,int)=0;$/;"	p	class:IMouseEventListener	access:public	implementation:pure virtual	signature:(int,int)
mousePressEvent	kbplot.cpp	/^void KbPlot::mousePressEvent(int,int){$/;"	f	class:KbPlot	signature:(int,int)
mousePressEvent	kbplot.h	/^		virtual void mousePressEvent(int,int);$/;"	p	class:KbPlot	access:public	implementation:virtual	signature:(int,int)
mouseReleaseEvent	event.h	/^	virtual void mouseReleaseEvent(int,int)=0;$/;"	p	class:IMouseEventListener	access:public	implementation:pure virtual	signature:(int,int)
mouseReleaseEvent	glwidget.cpp	/^void GLWidget::mouseReleaseEvent(QMouseEvent *e){$/;"	f	class:GLWidget	signature:(QMouseEvent *e)
mouseReleaseEvent	glwidget.h	/^	void mouseReleaseEvent(QMouseEvent *e);$/;"	p	class:GLWidget	access:public	signature:(QMouseEvent *e)
mouseReleaseEvent	kbplot.cpp	/^void KbPlot::mouseReleaseEvent(int,int){$/;"	f	class:KbPlot	signature:(int,int)
mouseReleaseEvent	kbplot.h	/^		virtual void mouseReleaseEvent(int,int);$/;"	p	class:KbPlot	access:public	implementation:virtual	signature:(int,int)
mouseScrollEvent	event.h	/^	virtual void mouseScrollEvent(int)=0;$/;"	p	class:IMouseEventListener	access:public	implementation:pure virtual	signature:(int)
mouseScrollEvent	kbplot.cpp	/^void KbPlot::mouseScrollEvent(int a){$/;"	f	class:KbPlot	signature:(int a)
mouseScrollEvent	kbplot.h	/^		virtual void mouseScrollEvent(int);$/;"	p	class:KbPlot	access:public	implementation:virtual	signature:(int)
mouseX	glwidget.h	/^	int mouseX, mouseY;$/;"	m	class:GLWidget	access:private
mouseY	glwidget.h	/^	int mouseX, mouseY;$/;"	m	class:GLWidget	access:private
objects	glwidget.h	/^	map<string, GraphicalObject*> objects;$/;"	m	class:GLWidget	access:private
paintGL	glwidget.cpp	/^void GLWidget::paintGL(){$/;"	f	class:GLWidget	signature:()
paintGL	glwidget.h	/^	void paintGL();$/;"	p	class:GLWidget	access:public	signature:()
qt_meta_data_GLWidget	moc_glwidget.cpp	/^static const uint qt_meta_data_GLWidget[] = {$/;"	v	file:
qt_meta_stringdata_GLWidget	moc_glwidget.cpp	/^static const qt_meta_stringdata_GLWidget_t qt_meta_stringdata_GLWidget = {$/;"	v	file:
qt_meta_stringdata_GLWidget_t	moc_glwidget.cpp	/^struct qt_meta_stringdata_GLWidget_t {$/;"	s	file:
qt_meta_stringdata_GLWidget_t::data	moc_glwidget.cpp	/^    QByteArrayData data[1];$/;"	m	struct:qt_meta_stringdata_GLWidget_t	file:	access:public
qt_meta_stringdata_GLWidget_t::stringdata	moc_glwidget.cpp	/^    char stringdata[10];$/;"	m	struct:qt_meta_stringdata_GLWidget_t	file:	access:public
qt_metacall	moc_glwidget.cpp	/^int GLWidget::qt_metacall(QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:GLWidget	signature:(QMetaObject::Call _c, int _id, void **_a)
qt_metacast	moc_glwidget.cpp	/^void *GLWidget::qt_metacast(const char *_clname)$/;"	f	class:GLWidget	signature:(const char *_clname)
qt_static_metacall	moc_glwidget.cpp	/^void GLWidget::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)$/;"	f	class:GLWidget	signature:(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
resizeGL	glwidget.cpp	/^void GLWidget::resizeGL(int nw, int nh){$/;"	f	class:GLWidget	signature:(int nw, int nh)
resizeGL	glwidget.h	/^	void resizeGL(int nw, int nh);$/;"	p	class:GLWidget	access:public	signature:(int nw, int nh)
scX	graphical_object.h	/^		double scX, scY;$/;"	m	class:GraphicalObject	access:protected
scY	graphical_object.h	/^		double scX, scY;$/;"	m	class:GraphicalObject	access:protected
scr_to_gl_x	glwidget.cpp	/^double GLWidget::scr_to_gl_x(int x){$/;"	f	class:GLWidget	signature:(int x)
scr_to_gl_x	glwidget.h	/^	virtual double scr_to_gl_x(int);$/;"	p	class:GLWidget	access:public	implementation:virtual	signature:(int)
scr_to_gl_y	glwidget.cpp	/^double GLWidget::scr_to_gl_y(int y){$/;"	f	class:GLWidget	signature:(int y)
scr_to_gl_y	glwidget.h	/^	virtual double scr_to_gl_y(int);$/;"	p	class:GLWidget	access:public	implementation:virtual	signature:(int)
setCoordinates	graphical_object.cpp	/^void Line::setCoordinates(double _x1, double _y1, double _x2, double _y2){$/;"	f	class:Line	signature:(double _x1, double _y1, double _x2, double _y2)
setCoordinates	graphical_object.h	/^		void setCoordinates(double,double,double,double);$/;"	p	class:Line	access:public	signature:(double,double,double,double)
setFixed	graphical_object.cpp	/^void GraphicalObject::setFixed(bool b){$/;"	f	class:GraphicalObject	signature:(bool b)
setFixed	graphical_object.h	/^		void setFixed(bool b = true);$/;"	p	class:GraphicalObject	access:public	signature:(bool b = true)
setRanges	kbplot.cpp	/^void KbPlot::setRanges(double _xmin, double _xmax, double _ymin, double _ymax){$/;"	f	class:KbPlot	signature:(double _xmin, double _xmax, double _ymin, double _ymax)
setRanges	kbplot.h	/^		void setRanges(double,double,double,double);$/;"	p	class:KbPlot	access:public	signature:(double,double,double,double)
setScale	graphical_object.cpp	/^void GraphicalObject::setScale(bool b){$/;"	f	class:GraphicalObject	signature:(bool b)
setScale	graphical_object.cpp	/^void GraphicalObject::setScale(double x, double y){$/;"	f	class:GraphicalObject	signature:(double x, double y)
setScale	graphical_object.h	/^		void setScale(bool);$/;"	p	class:GraphicalObject	access:public	signature:(bool)
setScale	graphical_object.h	/^		void setScale(double,double);$/;"	p	class:GraphicalObject	access:public	signature:(double,double)
setWorkingArea	aglwidget.h	/^	virtual void setWorkingArea(double, double, double, double)=0;$/;"	p	class:AGLWidget	access:public	implementation:pure virtual	signature:(double, double, double, double)
setWorkingArea	glwidget.cpp	/^void GLWidget::setWorkingArea(double xmin, double xmax, double ymin, double ymax){$/;"	f	class:GLWidget	signature:(double xmin, double xmax, double ymin, double ymax)
setWorkingArea	glwidget.h	/^	virtual void setWorkingArea(double xmin, double xmax, double ymin, double ymax);$/;"	p	class:GLWidget	access:public	implementation:virtual	signature:(double xmin, double xmax, double ymin, double ymax)
staticMetaObject	moc_glwidget.cpp	/^const QMetaObject GLWidget::staticMetaObject = {$/;"	m	class:GLWidget	file:
stringdata	moc_glwidget.cpp	/^    char stringdata[10];$/;"	m	struct:qt_meta_stringdata_GLWidget_t	file:	access:public
style	graphical_object.h	/^		Style style;$/;"	m	class:GraphicalObject	access:public
subscribeToMouse	aglwidget.h	/^	virtual void subscribeToMouse(IMouseEventListener *subscriber)=0;$/;"	p	class:AGLWidget	access:public	implementation:pure virtual	signature:(IMouseEventListener *subscriber)
subscribeToMouse	glwidget.cpp	/^void GLWidget::subscribeToMouse(IMouseEventListener*l){$/;"	f	class:GLWidget	signature:(IMouseEventListener*l)
subscribeToMouse	glwidget.h	/^	virtual void subscribeToMouse(IMouseEventListener*);$/;"	p	class:GLWidget	access:public	implementation:virtual	signature:(IMouseEventListener*)
trGLToScreenx	aglwidget.h	/^	virtual int trGLToScreenx(double)=0;$/;"	p	class:AGLWidget	access:public	implementation:pure virtual	signature:(double)
trGLToScreeny	aglwidget.h	/^	virtual int trGLToScreeny(double)=0;$/;"	p	class:AGLWidget	access:public	implementation:pure virtual	signature:(double)
trScreenToGLx	aglwidget.h	/^	virtual double trScreenToGLx(int)=0;$/;"	p	class:AGLWidget	access:public	implementation:pure virtual	signature:(int)
trScreenToGLy	aglwidget.h	/^	virtual double trScreenToGLy(int)=0;$/;"	p	class:AGLWidget	access:public	implementation:pure virtual	signature:(int)
trX	graphical_object.h	/^		double trX, trY;$/;"	m	class:GraphicalObject	access:protected
trY	graphical_object.h	/^		double trX, trY;$/;"	m	class:GraphicalObject	access:protected
values	graphical_object.h	/^		vector<double> *values;$/;"	m	class:Polyline	access:private
wlines	kbplot.h	/^		bool wlines = false;$/;"	m	struct:DataSet	access:public
wmarks	kbplot.h	/^		bool wmarks = true;$/;"	m	struct:DataSet	access:public
x1	graphical_object.h	/^		double x1,x2,y1,y2;$/;"	m	class:Line	access:private
x2	graphical_object.h	/^		double x1,x2,y1,y2;$/;"	m	class:Line	access:private
xmax	kbplot.h	/^		double xmax, ymax, xmin, ymin;$/;"	m	class:KbPlot	access:private
xmin	kbplot.h	/^		double xmax, ymax, xmin, ymin;$/;"	m	class:KbPlot	access:private
xticks_b	kbplot.h	/^		std::vector<Line*> xticks_b;$/;"	m	class:KbPlot	access:private
xticks_t	kbplot.h	/^		std::vector<Line*> xticks_t;$/;"	m	class:KbPlot	access:private
y1	graphical_object.h	/^		double x1,x2,y1,y2;$/;"	m	class:Line	access:private
y2	graphical_object.h	/^		double x1,x2,y1,y2;$/;"	m	class:Line	access:private
ymax	kbplot.h	/^		double xmax, ymax, xmin, ymin;$/;"	m	class:KbPlot	access:private
ymin	kbplot.h	/^		double xmax, ymax, xmin, ymin;$/;"	m	class:KbPlot	access:private
yticks_b	kbplot.h	/^		std::vector<Line*> yticks_b;$/;"	m	class:KbPlot	access:private
yticks_t	kbplot.h	/^		std::vector<Line*> yticks_t;$/;"	m	class:KbPlot	access:private
~AGLWidget	aglwidget.h	/^	virtual ~AGLWidget(){};$/;"	f	class:AGLWidget	access:public	implementation:virtual	signature:()
~DataSet	kbplot.cpp	/^DataSet::~DataSet(){$/;"	f	class:DataSet	signature:()
~DataSet	kbplot.h	/^		virtual ~DataSet();$/;"	p	struct:DataSet	access:public	implementation:virtual	signature:()
~GLWidget	glwidget.h	/^	virtual ~GLWidget(){};$/;"	f	class:GLWidget	access:public	implementation:virtual	signature:()
~GraphicalObject	graphical_object.h	/^		virtual ~GraphicalObject(){};$/;"	f	class:GraphicalObject	access:public	implementation:virtual	signature:()
~IMouseEventListener	event.h	/^	virtual ~IMouseEventListener() {};$/;"	f	class:IMouseEventListener	access:public	implementation:virtual	signature:()
~KbPlot	kbplot.cpp	/^KbPlot::~KbPlot(){$/;"	f	class:KbPlot	signature:()
~KbPlot	kbplot.h	/^		~KbPlot();$/;"	p	class:KbPlot	access:public	signature:()
~Line	graphical_object.h	/^		virtual ~Line(){};$/;"	f	class:Line	access:public	implementation:virtual	signature:()
~MarkerSet	graphical_object.h	/^		virtual ~MarkerSet (){};$/;"	f	class:MarkerSet	access:public	implementation:virtual	signature:()
~Polyline	graphical_object.h	/^		virtual ~Polyline(){};$/;"	f	class:Polyline	access:public	implementation:virtual	signature:()
